Add support for proper debugging (allowing to specify the robot/human intent at any point).
Fix tests (so they remember the replies and say "PASS" "FAIL" instead of having to re-read).

Solve the randomness between candidates, if it's there (e.g. by sorting).

Think about where to have values of R: variables (currently they are in the goal, think about this).

Add support for rendering logic

Simple support for sorry - revert to the previous state (without predictions) and try to find an intent that recreates the diff as well as possible

How to support variable dependencies?

Probs - try simple support? Ie true if > 0.75


----


Translation from BG Duplex
1. AskForX
*X=*
X=?
Note: usually X would be R:X
2. VerifyX(X=y)
*X=*
@X=y
3. SuggestTime(time=t)
AVAILABILITY[TIME=t]


2.this about interests - if interested by something we already gave, how do we model this?
- possible solution: everytime I do *A=B also do A=?
- also: if state has A=B, and adding A=C, instead set A=? (note that this depends on #1 above - do that first)

3.add support for sorry/repeats





-----

Change response_logic to always prefer the single best goal (in the future this can be a list with ties).
Each intent gets:
statements (changes to the list)
statements (add temporary goals to the other side)
requirements (set of conditions on the state that allow saying the utt)

Overall state of the infra is:
robot_intents

---



---

Use proper parsers (I started something in line_parser).

Change predictions to temporary goals.
  Add a GoalQueue class for each side.

Time variables:
PREFERRED_TIME=...
USER_AVAILABILITY[TIME=...]=...
BUSINESS_AVAILABILITY[TIME=]=...
HUMAN_AGREED_TIME=
ROBOT_AGREED_TIME=
---
R:For tomorrow at 7pm
PREFERRED_TIME=7pm
*AGREED_TIME=7pm
---
H:I can't do 7pm, but I can do 8pm
H:AVAILABILITY[TIME=7pm]=False
H:AVAILABILITY[TIME=8pm]=True
*AGREED_TIME=8pm
---
R:Can you do anytime between 7pm and 8pm?
R:AVAILABILITY[TIME=7pm]=True
R:AVAILABILITY[TIME=7:30pm]=True
R:AVAILABILITY[TIME=8pm]=True
*AGREED_TIME=*



Need some way to enforce order: we want to robot to query for AVAILABILITY[TIME=7pm]
before it queries for AGREED_TIME[TIME=7pm].
Option 1: Make the goal require both availability and agreed time.


Refactor VarSpec to use standard block_parser?


Need to prefer utt that advance us towards several goals?
E.g.:
R:What time are you available?
*AVAILABILITY[TIME=6pm]
*AVAILABILITY[TIME=7pm]
*AVAILABILITY[TIME=8pm]
*AGREED_TIME[TIME=6pm]
*AGREED_TIME[TIME=7pm]
*AGREED_TIME[TIME=8pm]
Should be preferred to:
Can you do 7pm?
*AVAILABILITY[TIME=7pm]
*AGREED_TIME[TIME=7pm]
Need to improve response_logic somehow.

H:I can do 8pm
AVAILABILITY[TIME=8pm]=True
R:Let's do 8pm then
AGREED_TIME[TIME=8pm]=True
O_O - how do we make sure the bot doesn't take a shortcut to AGREED_TIME without
passing through AVAILABILITY first???
Option 1:
R:Can you do 8pm?
*AVAILABILITY[TIME=8pm]
*AGREED_TIME[TIME=8pm]
Solution 1: (?)
R:What times are you available?
*AVAILABILITY[TIME=6pm]
*AVAILABILITY[TIME=7pm]
*AVAILABILITY[TIME=8pm]
*AGREED_TIME[TIME=6pm]
*AGREED_TIME[TIME=7pm]
*AGREED_TIME[TIME=8pm]
Solution 2: (?)
use probs
R:Let's do 8pm then
AGREED_TIME[TIME=8pm]=True +0.2


Think about adding Interest in statement not just variable.
So, e.g.
Can you do 8pm?
*AGREED_TIME=8
Which would get us closer to AGREED_TIME=8 than *AGREED_TIME
Another option would be to start actually doing a graph search.
(but might need to add support for conditional expressions...)



think about:
R: For 7pm
H: I can do 8m
probably "H: I can do 8m" should be:
TIME=8pm 0.4
NO_AVAILABILITY[TIME=7PM]=True 0.4

think about conditions:
  e.g. min reservation size 5

Add confidence (absolute and relative)
  think about this - do i really need both?
  what happens if VAR changes value? keeps same value?
  how to implement diffs?
  VAR=value 0.4 # absolute
  VAR=value +0.4 # relative
  ProbStatement
    prob
    prob_delta = 0


add prepositions to state
  positive_prep
  negative_prep

  ?VAR=value 0.4
  examples:
  Did you say 4pm?
  TIME=4pm 0.3
  ?TIME=4pm +0.3
  !TIME=?
  *TIME
  these are part of the state
  @positive
  @negative

  Am I all set?
  ?CONFIRM=True +0.5
  !CONFIRM=False +0.5
  *CONFIRM


Verifies implemented as interest + statement + preposition
For 4pm
TIME=4pm 0.7
?TIME=4pm +0.7
---
Yes
@positive
---
Yes for 4pm
@positive
TIME=4pm +0.3
---
Are you Google?
BOT_IDENTITY=Google 0.3
?BOT_IDENTITY=Google +0.3
*BOT_IDENTITY
---
Did you say for tomorrow for 5pm?
*DATE
DATE=tomorrow 0.3
?DATE=tomorrow +0.3
*TIME
TIME=5pm 0.3
?TIME=5pm +0.3

add support for hold, repeats, sorry --> independent of use case

Allow goals for not_incorrect(x)
  Do I need this? Maybe happens automatically

Add rendering logic for intents: When human says "you're all set" if we haven't given the name yet, rendering should be different

Add printing of all values (genValues(filename))


Document syntax:
Statement: VAR=value
Express interest: *VAR
Comment: #
Separator: ---

Rename State.statement_list to State.statements

refactor State to AssertionsState, InterestsState, ...
